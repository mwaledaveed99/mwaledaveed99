---
title: "Cleaning Iris dataset"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Loading of libraries
```{r}
#| echo: true
#| message: false
#| warning: false
library(tidyverse)
library(messy) # for creating messy data
library(naniar) # for assessing missing values
library(janitor) # Data cleaning
library(gt) #generating tables
library(gtExtras)
library(cowplot)
```

## The Iris dataset
The Iris dataset is one of the most famous datasets in statistics and machine learning. It was first introduced by the British biologist and statistician Ronald Fisher in 1936 in his paper "The use of multiple measurements in taxonomic problems." The dataset consists of 150 samples of iris flowers from three different species: Setosa, Versicolor, and Virginica. Each sample includes four features/columns/variables: sepal length, sepal width, petal length, and petal width

### Data cleaning & EDA 
The explorations that I will conduct in this document will involve the following:

1.  Messy column names

2.  Improper variable types

3.  Invalid or inconsistent values

4.  Missing values

5.  Non-standard data formats

## Creating a messy dataset
```{r Messy dataset}
set.seed(123456)
messy_iris<-messy(iris)
messy_iris %>%
  head() |> 
  gt()
```
### Key observations
- We can see that the column names are separated by "." and are not in lower case. we are going to convert these to lower snake_case.\n
- Even before we search for missing values, we can note that the dataset has missing values
- Finally we can also see that the species column has more that three variations of the setosa.

### Understanding the dataset
Now, we are going to run different codes, just to understand our dataset.

```{r}
messy_iris |> #Checking the dimensions of the data (The data has 150 rows, and 5 columns)
  dim()
```

```{r}
messy_iris %>% # Taking a quick look at our dataset
  glimpse()
```
It's good to understand our data. We have also noted that the data type for all the columns is character (chr) structure. This can limit certain operations that require our data to be in numeric or categorical (factor) form. We are also going to fix this.
```{r}
messy_iris %>% # Understanding the column names of the dataset
  colnames()
```

```{r}
messy_iris %>% # Checking for unique values of Species. 
  select(Species) %>% 
  distinct()
```

The dataset is supposed to have three different species of the flower namely; setosa, viginica, and versicolor. However, we can quickly note from code output that we have over 68 different variations of these species. Again, we are going to fix this too!!


## Data Cleaning process
Firstly, we are going to take the messy dataset, and load it into the clean_iris data object as this is what will finally house our clean dataset. Immediately, we will start cleaning by working on the column names using the clean_names() function from the janitor package.
```{r Fixing column names}
clean_iris<-messy_iris %>% 
  clean_names()
clean_iris |> 
  head(10)
```

Note that our column names are now in lower case using the snake_case format. The next thing that we are going to do is ensure that the species column only has the three different values. 

```{r Unique values for species}
head(clean_iris$species)
```


```{r badSetosa}
bad_setosa <- c( "setos)a", "setosa ", "setosa","setosa", "setosa", "setosa ", "seto_sa",  "s&etosa",  "setosa", "SETOSA", "setosa", "se(tosa", "setosa","setosa", "setosa","setosa","*setosa","set_osa","setosa",         "se@tosa","setosa", "(s_etos.a",      "set(osa","setos$a","seto-s(a","(SETOSA","setosa ", "s-eto%sa",       "setosa","SETOSA", "seto.sa","setosa","setos^a", "setosa","set$osa", "setosa", "se+tosa","seto*sa",        "S)ETOSA","setos*a", "setosa","set!osa","setosa","setosa","s@et#osa ","setosa","setosa")
```

```{r badVericolor}
bad_versicolor<-c("versic(olor","ver@sicolor","versico_lor","ve#rsicolor","versicolor",          "versico@lor","versicolor","versicolor","versicolor","versicolor","versicolor","vers_i%c#ol%or", "V*ERSICOLOR","ver!sicolor","+versicolo^r","versicolor","versico)l^or","versicol^or","ve&rsicolor","versicolor","$vers+icolor","versicolor ",")versicolor", "versicolor","versicolor","versicolor","versicolor ","ver&sicolor ","versico(lo$r","versi_color","versicolor","vers-ic.ol%o&r", "versicolor","versicolor",     "versicolor","*versicolor","versicolor","versicol!or","&versicolor","%versicol%or ",  "v%ersicolor","v+ersicolor")
```

```{r bad_virginica}
bad_virginica <- c("virginica","vir!ginica","virginica","VIRGINICA","virginica","virginica",     
"virginica","virg^inica","virginica","$virg(inica","virginica","virginica ","virginica",     "virginica","virgini+ca","vir-ginica", "virginica","virginica","virgin!ica","virginica",   ".virginic#a","virginica","virginic_a","virginica","v(irgi$nica","virginica","virginic#a",     "vir.gini@ca","virginica ","v#irgini(ca", "virginica","virginica","virginica","virginica",      "virgi^nica","virginica","virginica","virginica","VIRGINICA","virginica","virginica")
```


The code below, is going to replace bad species with the right value using dplyr case_when function

```{r Cleaning}
clean_iris<-clean_iris %>% 
   mutate(species_clean = case_when(species %in% bad_setosa ~ "setosa",
                                    species %in% bad_versicolor ~ "versicolor",
                                    species %in% bad_virginica ~ "virginica"))

unique(clean_iris$species_clean)
```

### Converting variables 
```{r}
clean_iris |> 
  mutate(across(c(sepal_length,
                  sepal_width,
                  petal_length,
                  petal_width),as.numeric),
         species_clean=factor(species_clean)) |> 
  glimpse()
```
 
After conversion, we now have the double precision, factor, and character data types. This will be important in our analysis.
 
# Checking for missingness in Iris dataset

```{r missing variables}
clean_iris |> 
  miss_var_summary() |> 
  gt()
```

```{r Visualising the missing variables}
vis_miss(clean_iris)
```

We have over 57.3% of missing dataset for species. There are many ways of handling missing values including list-wise deletion to drop all missing values. This is **not** the recommended method.


# Our next sections will be on Missing Data, EDA, and Data Visulisation

## Missing values
There are many ways of working with missing values including methods such as listwise deletion, pairwise deletion, imputation etc. In this section we are going to use imputation by employing a package;  missForest, which uses random forest to train data of observed values of data matrix to predict missing values. 

```{r}
#install.packages("missForest")
library(missForest)

iris_impute<-clean_iris |> 
  select(-species) |> 
  mutate(across(c(sepal_length,
                  sepal_width,
                  petal_length,
                  petal_width), as.numeric),
         species_clean = as.factor(species_clean))


iris_imputed<-missForest(iris_impute,xtrue = ,maxiter = 10,ntree = 100,verbose = FALSE)

df_imputed<-iris_imputed$ximp

df_imputed %>% 
  miss_var_summary() %>% 
  gt() 
```

Even though imputing datasets (multiple imputation) is better than methods like list wise deletion, along with it comes ethical implications especially for identity data.
```{r}
iris_imputed$OOBerror
```

The error rates for both the categorical and numerical values are relatively low.

## Exploratory Data Analysis (EDA)

In this section we will understand our data further using graphics to see the distribution of different variables. We will use boxplots, q-q plots, and histograms to assess distribution of variables.
```{r}
plot_sl_1<-df_imputed |> 
  ggplot(aes(x = sepal_length))+
  geom_histogram()+
  theme_bw() +
  labs(title = "Histogram - Imputed data")
iris_sp1<-iris |> 
  ggplot(aes(x = Sepal.Length))+
  geom_histogram()+
  theme_bw()+
  labs(title = "Histogram - original data")

plot_sl_2<-df_imputed |> 
  ggplot(aes(sample = sepal_length))+
  stat_qq()+
  stat_qq_line(color = "red")+
  theme_bw() +
  labs(title = "Q-Q plot for imputed data")

iris_sl_2<-iris |> 
  ggplot(aes(sample = Sepal.Length))+
  stat_qq()+
  stat_qq_line(color = "red")+
  theme_bw() +
  labs(title = "Q-Q Plot original data")

cowplot::plot_grid(plot_sl_1, iris_sp1,plot_sl_2,iris_sl_2, ncol = 2)
```



## VISUALISATION 

```{r}
df_imputed |> 
  ggplot(aes(x = sepal_length,y = petal_width))+
  geom_point(aes(colour = species_clean, size = petal_length), alpha = 0.5) +
  scale_color_manual(values = c("#00AFBB", "#e7b800","#FC4E07"))+
  scale_size(range = c(0.5, 12)) +
  theme_bw()+
  labs(title = "Plot showing Petal width against Petal length")
```





















































































