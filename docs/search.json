[
  {
    "objectID": "iris_dataset.html",
    "href": "iris_dataset.html",
    "title": "Cleaning Iris dataset",
    "section": "",
    "text": "library(tidyverse)\nlibrary(messy) # for creating messy data\nlibrary(naniar) # for assessing missing values\nlibrary(janitor) # Data cleaning\nlibrary(gt) #generating tables\nlibrary(gtExtras)\nlibrary(cowplot)"
  },
  {
    "objectID": "iris_dataset.html#loading-of-libraries",
    "href": "iris_dataset.html#loading-of-libraries",
    "title": "Cleaning Iris dataset",
    "section": "",
    "text": "library(tidyverse)\nlibrary(messy) # for creating messy data\nlibrary(naniar) # for assessing missing values\nlibrary(janitor) # Data cleaning\nlibrary(gt) #generating tables\nlibrary(gtExtras)\nlibrary(cowplot)"
  },
  {
    "objectID": "iris_dataset.html#the-iris-dataset",
    "href": "iris_dataset.html#the-iris-dataset",
    "title": "Cleaning Iris dataset",
    "section": "The Iris dataset",
    "text": "The Iris dataset\nThe Iris dataset is one of the most famous datasets in statistics and machine learning. It was first introduced by the British biologist and statistician Ronald Fisher in 1936 in his paper “The use of multiple measurements in taxonomic problems.” The dataset consists of 150 samples of iris flowers from three different species: Setosa, Versicolor, and Virginica. Each sample includes four features/columns/variables: sepal length, sepal width, petal length, and petal width\n\nData cleaning & EDA\nThe explorations that I will conduct in this document will involve the following:\n\nMessy column names\nImproper variable types\nInvalid or inconsistent values\nMissing values\nNon-standard data formats"
  },
  {
    "objectID": "iris_dataset.html#creating-a-messy-dataset",
    "href": "iris_dataset.html#creating-a-messy-dataset",
    "title": "Cleaning Iris dataset",
    "section": "Creating a messy dataset",
    "text": "Creating a messy dataset\n\nmessy_iris&lt;-messy(iris)\nmessy_iris %&gt;%\n  head() |&gt; \n  gt()\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\nNA\nNA\n0.2\nsetos@a\n\n\n4.9\n3\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nset!os#a\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5\n3.6\n1.4\n0.2\nNA\n\n\n5.4\nNA\n1.7\n0.4\nsetosa\n\n\n\n\n\n\n\n\nKey observations\n\nWe can see that the column names are seperated by “.” and are not in lower case. we are going to convert these to lower snake_case.\nEven before we search for missing values, we can note that the dataset has missing values\nFinally we can also see that the species column has more that three variations of the setosa.\n\n\n\nUndersdaning the dataset\nNow, we are going to run diffrent codes, just to understand our dataset.\n\nmessy_iris |&gt; #Checking the dimensions of the data (The data has 150 rows, and 5 columns)\n  dim()\n\n[1] 150   5\n\n\n\nmessy_iris %&gt;% # Taking a quick look at our dataset\n  glimpse()\n\nRows: 150\nColumns: 5\n$ Sepal.Length &lt;chr&gt; \"5.1\", \"4.9\", \"4.7\", \"4.6\", \"5 \", \"5.4\", NA, \"5\", \"4.4\", …\n$ Sepal.Width  &lt;chr&gt; NA, \"3 \", \"3.2\", \"3.1\", \"3.6\", NA, \"3.4\", \"3.4\", \"2.9 \", …\n$ Petal.Length &lt;chr&gt; NA, \"1.4\", \"1.3\", \"1.5 \", \"1.4\", \"1.7\", \"1.4\", \"1.5\", \"1.…\n$ Petal.Width  &lt;chr&gt; \"0.2\", \"0.2\", \"0.2\", \"0.2\", \"0.2\", \"0.4\", NA, \"0.2\", \"0.2…\n$ Species      &lt;chr&gt; \"setos@a\", \"setosa\", \"set!os#a\", \"setosa\", NA, \"setosa\", …\n\n\nIt’s good to understand our data. We have also noted that the data type for all the columns is character (chr). This can limit certain operations that require our data to be in numeric form. We are also going to fix this.\n\nmessy_iris %&gt;% # Understanding the column names of the dataset\n  colnames()\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n\n\nmessy_iris %&gt;% # Checking for unique values of Species. \n  select(Species) %&gt;% \n  distinct()\n\n           Species\n1          setos@a\n2           setosa\n3         set!os#a\n4             &lt;NA&gt;\n5          se)tosa\n6          setosa \n7          s*etosa\n8          s^etosa\n9          setos-a\n10         s)etosa\n11         s$etosa\n12        !s#etosa\n13         setos#a\n14         se_tosa\n15         setos*a\n16        s(eto$sa\n17        s*et)osa\n18          SETOSA\n19         set.osa\n20         set*osa\n21        )S+ETOSA\n22         se-tosa\n23        setos_a \n24         s_etosa\n25         SETOS%A\n26       se$t%osa \n27         setos(a\n28    ve+rsi^color\n29 &ve%r@s!icolo-r\n30      versicolor\n31   versi#c&olor \n32     ve#rsicolor\n33     vers+icolor\n34    versicol$o-r\n35     ve(rsicolor\n36     versicol.or\n37     ver*sicolor\n38    versicol&or \n39     versico&lor\n40    v-ersicolor \n41    v&ersicolo^r\n42     vers#icolor\n43    versic$ol.or\n44    ve+rsicolo.r\n45    vers^icolor \n46     versicolo$r\n47    ve-rsi-color\n48   ve+rsi^colo&r\n49     versico(lor\n50    ve^rsic#olor\n51     versicolor \n52     !versicolor\n53     versicolo#r\n54    )VE%RSICOLOR\n55    ve_r-sicolor\n56     versico-lor\n57     versi(color\n58    )ver$sicolor\n59    ver_s*icolor\n60    v_ersicolo#r\n61       VIRGINICA\n62      )virginica\n63    v#ir@ginica \n64       virginica\n65     virgin-ic@a\n66    v)irgin+ic)a\n67     vi^r&ginica\n68      virgi+nica\n69      virgini@ca\n70     virgin*ica \n71     vi(rg(inica\n72     virg-ini@ca\n73     vi&r$ginica\n74     virg!in$ica\n75      @virginica\n76      virgin+ica\n77      virg*inica\n78     vi.r^ginica\n79      virgin@ica\n80      virg!inica\n81      virgi)nica\n82      virg^inica\n83      virginica \n84     virgini&c!a\n85   v*irg)i#nica \n86     virgini#c.a\n87     virgin*i$ca\n\n\nThe dataset is supposed to have three different species of the flower namely; setosa, viginica, and versicolor. However, we can quickly note from code output that we have over 68 different variations of these species. Again, we are going to fix this too!!"
  },
  {
    "objectID": "iris_dataset.html#data-cleaning-process",
    "href": "iris_dataset.html#data-cleaning-process",
    "title": "Cleaning Iris dataset",
    "section": "Data Cleaning process",
    "text": "Data Cleaning process\nFirstly, we are going to take the messy dataset, and load it into the clean_iris data object as this is what will finally house our clean dataset. Immediately, we will start cleaning by working on the column names using the clean_names() function from the janitor package.\n\nclean_iris&lt;-messy_iris %&gt;% \n  clean_names()\nclean_iris |&gt; \n  head(10)\n\n   sepal_length sepal_width petal_length petal_width  species\n1           5.1        &lt;NA&gt;         &lt;NA&gt;         0.2  setos@a\n2           4.9          3           1.4         0.2   setosa\n3           4.7         3.2          1.3         0.2 set!os#a\n4           4.6         3.1         1.5          0.2   setosa\n5            5          3.6          1.4         0.2     &lt;NA&gt;\n6           5.4        &lt;NA&gt;          1.7         0.4   setosa\n7          &lt;NA&gt;         3.4          1.4        &lt;NA&gt;  se)tosa\n8             5         3.4          1.5         0.2  setosa \n9           4.4        2.9           1.4         0.2  s*etosa\n10          4.9         3.1         &lt;NA&gt;         0.1  s^etosa\n\n\nNote that our column names are now in lower case using the snake_case format. The next thing that we are going to do is ensure that the species column only has the three different values.\n\nhead(clean_iris$species)\n\n[1] \"setos@a\"  \"setosa\"   \"set!os#a\" \"setosa\"   NA         \"setosa\"  \n\n\n\nbad_setosa &lt;- c( \"setos)a\", \"setosa \", \"setosa\",\"setosa\", \"setosa\", \"setosa \", \"seto_sa\",  \"s&etosa\",  \"setosa\", \"SETOSA\", \"setosa\", \"se(tosa\", \"setosa\",\"setosa\", \"setosa\",\"setosa\",\"*setosa\",\"set_osa\",\"setosa\",         \"se@tosa\",\"setosa\", \"(s_etos.a\",      \"set(osa\",\"setos$a\",\"seto-s(a\",\"(SETOSA\",\"setosa \", \"s-eto%sa\",       \"setosa\",\"SETOSA\", \"seto.sa\",\"setosa\",\"setos^a\", \"setosa\",\"set$osa\", \"setosa\", \"se+tosa\",\"seto*sa\",        \"S)ETOSA\",\"setos*a\", \"setosa\",\"set!osa\",\"setosa\",\"setosa\",\"s@et#osa \",\"setosa\",\"setosa\")\n\n\nbad_versicolor&lt;-c(\"versic(olor\",\"ver@sicolor\",\"versico_lor\",\"ve#rsicolor\",\"versicolor\",          \"versico@lor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"versicolor\",\"vers_i%c#ol%or\", \"V*ERSICOLOR\",\"ver!sicolor\",\"+versicolo^r\",\"versicolor\",\"versico)l^or\",\"versicol^or\",\"ve&rsicolor\",\"versicolor\",\"$vers+icolor\",\"versicolor \",\")versicolor\", \"versicolor\",\"versicolor\",\"versicolor\",\"versicolor \",\"ver&sicolor \",\"versico(lo$r\",\"versi_color\",\"versicolor\",\"vers-ic.ol%o&r\", \"versicolor\",\"versicolor\",     \"versicolor\",\"*versicolor\",\"versicolor\",\"versicol!or\",\"&versicolor\",\"%versicol%or \",  \"v%ersicolor\",\"v+ersicolor\")\n\n\nbad_virginica &lt;- c(\"virginica\",\"vir!ginica\",\"virginica\",\"VIRGINICA\",\"virginica\",\"virginica\",     \n\"virginica\",\"virg^inica\",\"virginica\",\"$virg(inica\",\"virginica\",\"virginica \",\"virginica\",     \"virginica\",\"virgini+ca\",\"vir-ginica\", \"virginica\",\"virginica\",\"virgin!ica\",\"virginica\",   \".virginic#a\",\"virginica\",\"virginic_a\",\"virginica\",\"v(irgi$nica\",\"virginica\",\"virginic#a\",     \"vir.gini@ca\",\"virginica \",\"v#irgini(ca\", \"virginica\",\"virginica\",\"virginica\",\"virginica\",      \"virgi^nica\",\"virginica\",\"virginica\",\"virginica\",\"VIRGINICA\",\"virginica\",\"virginica\")\n\nThe code below, is going to replace bad species with the right value using dplyr case_when function\n\nclean_iris&lt;-clean_iris %&gt;% \n   mutate(species_clean = case_when(species %in% bad_setosa ~ \"setosa\",\n                                    species %in% bad_versicolor ~ \"versicolor\",\n                                    species %in% bad_virginica ~ \"virginica\"))\n\nunique(clean_iris$species_clean)\n\n[1] NA           \"setosa\"     \"versicolor\" \"virginica\" \n\n\n\nConverting variables\n\nclean_iris |&gt; \n  mutate(species_clean=as_factor(species_clean),\n         sepal_length=as.numeric(sepal_length),\n         sepal_width=as.numeric(sepal_width),\n         petal_length=as.numeric(petal_length),\n         petal_width=as.numeric(petal_width)) |&gt; \n  glimpse()\n\nRows: 150\nColumns: 6\n$ sepal_length  &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, NA, 5.0, 4.4, 4.9, 5.4, NA…\n$ sepal_width   &lt;dbl&gt; NA, 3.0, 3.2, 3.1, 3.6, NA, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4…\n$ petal_length  &lt;dbl&gt; NA, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, NA, 1.5, 1.6…\n$ petal_width   &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, NA, 0.2, 0.2, 0.1, 0.2, 0.…\n$ species       &lt;chr&gt; \"setos@a\", \"setosa\", \"set!os#a\", \"setosa\", NA, \"setosa\",…\n$ species_clean &lt;fct&gt; NA, setosa, NA, setosa, NA, setosa, NA, setosa, NA, NA, …\n\n\nAfter conversion, we now have the double precision, factor, and character data types. This will be important in our analysis."
  },
  {
    "objectID": "iris_dataset.html#missing-values",
    "href": "iris_dataset.html#missing-values",
    "title": "Cleaning Iris dataset",
    "section": "Missing values",
    "text": "Missing values\nThere are many ways of working with missing values including methods such as listwise deletion, pairwise deletion, imputation etc. In this section we are going to use imputation by employing a package; missForest, which uses random forest to train data of observed values of data matrix to predict missing values.\n\n#install.packages(\"missForest\")\nlibrary(missForest)\n\niris_impute&lt;-clean_iris |&gt; \n  select(-species) |&gt; \n  mutate(across(c(sepal_length,sepal_width,petal_length,petal_width), as.numeric),\n         species_clean = as.factor(species_clean))\n\n\niris_imputed&lt;-missForest(iris_impute,xtrue = ,maxiter = 10,ntree = 100,verbose = FALSE)\n\ndf_imputed&lt;-iris_imputed$ximp\n\ndf_imputed %&gt;% \n  miss_var_summary() %&gt;% \n  gt() \n\n\n\n\n\n\n\nvariable\nn_miss\npct_miss\n\n\n\n\nsepal_length\n0\n0\n\n\nsepal_width\n0\n0\n\n\npetal_length\n0\n0\n\n\npetal_width\n0\n0\n\n\nspecies_clean\n0\n0\n\n\n\n\n\n\n\n\niris_imputed$OOBerror\n\n     NRMSE        PFC \n0.13475051 0.05454545 \n\n\nThe error rates for both the categorical and numerical values are relatively low."
  },
  {
    "objectID": "iris_dataset.html#exploratory-data-analysis-eda",
    "href": "iris_dataset.html#exploratory-data-analysis-eda",
    "title": "Cleaning Iris dataset",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nIn this section we will understand our data further using graphics to see the distribution of different variables. We will use boxplots, q-q plots, and histograms to assess distribution of variables.\n\nplot_sl_1&lt;-df_imputed |&gt; \n  ggplot(aes(x = sepal_length))+\n  geom_histogram()+\n  theme_bw() +\n  labs(title = \"Histogram - Imputed data\")\niris_sp1&lt;-iris |&gt; \n  ggplot(aes(x = Sepal.Length))+\n  geom_histogram()+\n  theme_bw()+\n  labs(title = \"Histogram - original data\")\n\nplot_sl_2&lt;-df_imputed |&gt; \n  ggplot(aes(sample = sepal_length))+\n  stat_qq()+\n  stat_qq_line(color = \"red\")+\n  theme_bw() +\n  labs(title = \"Q-Q plot for imputed data\")\n\niris_sl_2&lt;-iris |&gt; \n  ggplot(aes(sample = Sepal.Length))+\n  stat_qq()+\n  stat_qq_line(color = \"red\")+\n  theme_bw() +\n  labs(title = \"Q-Q Plot original data\")\n\ncowplot::plot_grid(plot_sl_1, iris_sp1,plot_sl_2,iris_sl_2, ncol = 2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "iris_dataset.html#visualisation",
    "href": "iris_dataset.html#visualisation",
    "title": "Cleaning Iris dataset",
    "section": "VISUALISATION",
    "text": "VISUALISATION\nLoading&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"
  },
  {
    "objectID": "contact.html#get-in-touch",
    "href": "contact.html#get-in-touch",
    "title": "contact",
    "section": "Get in Touch",
    "text": "Get in Touch\nReach out for collaborations, R workshops, or data science opportunities:\n\nEmail: d.mwale@sms.ed.ac.uk\nPhone: +265993627367\nGitHub: mwaledaveed99"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "My name is David Mwale. I am a second-year student at the University of Edinburgh, studying Data Science for Health and Social Care. My interests include Statistical Modelling, Data Cleaning, Visualization, building data pipelines for automation, and Machine Learning."
  },
  {
    "objectID": "about.html#education-experience",
    "href": "about.html#education-experience",
    "title": "About Me",
    "section": "Education & Experience",
    "text": "Education & Experience\n\nMSc in Data Science for Health and Social care | University of Edinburgh| 2023- present\nDiploma in Monitoring and Evaluation | The Catholic University of Malawi | 2018-20\nBSc Agricultural Economics | University of Malawi | 2011-15\nRUsers Malawi Lead organiser | Lilongwe, Malawi | 2024- present"
  },
  {
    "objectID": "about.html#business-intelligence",
    "href": "about.html#business-intelligence",
    "title": "About Me",
    "section": "Business Intelligence ",
    "text": "Business Intelligence \n\nPowerBI\n\n\nContact \n\nEmail: d.mwale@sms.ed.ac.uk\nPhone: +265 993 627 367\nLinkedIn"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Portfolio",
    "section": "",
    "text": "Welcome to my portfolio! I am a data science student showcasing my projects and skills in data science, statistical modeling, and machine learning. In my almost 2 years with the University of Edinburgh, i have learned, relearned, and unlearned regarding Data science in health and social care. What I have learned is much more than i will be able to showcase through this platform. Experienced in Python, SQL, R programming, and health data analysis, with focus on reproducible research."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "My Portfolio",
    "section": "",
    "text": "Welcome to my portfolio! I am a data science student showcasing my projects and skills in data science, statistical modeling, and machine learning. In my almost 2 years with the University of Edinburgh, i have learned, relearned, and unlearned regarding Data science in health and social care. What I have learned is much more than i will be able to showcase through this platform. Experienced in Python, SQL, R programming, and health data analysis, with focus on reproducible research."
  },
  {
    "objectID": "index.html#my-projects",
    "href": "index.html#my-projects",
    "title": "My Portfolio",
    "section": "My Projects",
    "text": "My Projects\n\nData Wrangling in R: Cleaning and transforming datasets using tidyverse and other R packages.\nData Visualization: Creating insightful visualizations with ggplot2 and interactive dashboards.\nStatistical Modelling for Epidemiology: Applying statistical models to analyze health data trends.\nMachine Learning with R: Building predictive models using tidymodels and other ML frameworks."
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "My Portfolio",
    "section": "Skills",
    "text": "Skills\n\nLanguages\n\nR\nSQL\nPython"
  }
]